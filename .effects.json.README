# CRITICAL: Standard Library Effect Registry

This file contains effect definitions for ALL Elixir and Erlang standard library functions.

## IMPORTANT RULES:

1. **Completeness Requirement**: Every function from the standard library modules listed 
   below MUST have an explicit effect definition. Missing functions will cause 
   immediate exceptions during analysis.

2. **Effect Types**:
   - "p" = pure (no side effects, no exceptions)
   - "d" = dependent (reads from execution environment: time, process dict, env vars, ETS)
   - "l" = lambda (effects depend on passed lambdas/higher-order functions)
   - "n" = nif (native implemented function)
   - "s" = side effects (io, file, process, network, state mutations, writes)
   - {"e": ["exn"]} = can raise exceptions
   - "u" = unknown (avoid using for stdlib)

3. **Standard Library Modules** (MUST be complete):
   
   Elixir Stdlib:
   - File, IO, Process, Port, Agent, Task, GenServer, Supervisor
   - Application, Logger, System, Code, Kernel
   
   Erlang Stdlib:
   - erlang, gen_tcp, gen_udp, inet, ssl, ets, dets, rand, random, os

## File Format:

{
  "Module.Name": {
    "function/arity": "effect_type",
    ...
  }
}

## Adding New Functions:

When adding a new stdlib function:
1. Determine if it's pure, has exceptions, or has side effects
2. Add to the appropriate module with the correct effect type
3. Recompile to ensure the registry loads it
4. Test that the function is recognized

## Verification:

Run `mix run -e "Litmus.Effects.Registry.effect_type({Module, :function, arity})"` 
to verify any function is in the registry.
