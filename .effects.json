{
  "Elixir.Agent": {
    "get/2": "s",
    "get/3": "s",
    "get_and_update/3": "s",
    "get_and_update/4": "s",
    "start/1": "s",
    "start/2": "s",
    "start/3": "s",
    "start_link/1": "s",
    "start_link/2": "s",
    "start_link/3": "s",
    "stop/1": "s",
    "stop/2": "s",
    "stop/3": "s",
    "update/2": "s",
    "update/3": "s",
    "update/4": "s"
  },
  "Elixir.Application": {
    "delete_env/2": "s",
    "delete_env/3": "s",
    "get_env/2": "s",
    "get_env/3": "s",
    "load/1": "s",
    "load/2": "s",
    "put_env/3": "s",
    "put_env/4": "s",
    "start/1": "s",
    "start/2": "s",
    "start/3": "s",
    "stop/1": "s",
    "unload/1": "s"
  },
  "Elixir.Code": {
    "compile_file/1": "s",
    "compile_file/2": "s",
    "compile_string/1": "s",
    "compile_string/2": "s",
    "eval_file/1": "s",
    "eval_file/2": "s",
    "eval_string/1": "s",
    "eval_string/2": "s",
    "load_file/1": "s",
    "load_file/2": "s",
    "require_file/1": "s",
    "require_file/2": "s"
  },
  "Elixir.Enum": {
    "all?/1": "p",
    "all?/2": "u",
    "any?/1": "p",
    "any?/2": "u",
    "at/2": "p",
    "at/3": "p",
    "chunk_every/2": "p",
    "chunk_every/3": "p",
    "chunk_every/4": "p",
    "concat/1": "p",
    "concat/2": "p",
    "count/1": "p",
    "count/2": "u",
    "dedup/1": "p",
    "dedup_by/2": "u",
    "drop/2": "p",
    "drop_while/2": "u",
    "each/2": "u",
    "empty?/1": "p",
    "fetch!/2": "p",
    "fetch/2": "p",
    "filter/1": "p",
    "filter/2": "l",
    "find/2": "u",
    "find/3": "u",
    "flat_map/2": "u",
    "group_by/2": "l",
    "group_by/3": "u",
    "into/2": "p",
    "into/3": "p",
    "join/1": "p",
    "join/2": "p",
    "map/1": "p",
    "map/2": "l",
    "map_join/2": "u",
    "map_join/3": "u",
    "map_reduce/3": "u",
    "max/1": "p",
    "max/2": "p",
    "max/3": "p",
    "max_by/2": "u",
    "max_by/3": "u",
    "max_by/4": "u",
    "member?/2": "p",
    "min/1": "p",
    "min/2": "p",
    "min/3": "p",
    "min_by/2": "u",
    "min_by/3": "u",
    "min_by/4": "u",
    "reduce/1": "p",
    "reduce/2": "u",
    "reduce/3": "l",
    "reduce_while/3": "u",
    "reject/2": "u",
    "reverse/1": "p",
    "reverse/2": "p",
    "scan/2": "u",
    "scan/3": "u",
    "slice/2": "p",
    "slice/3": "p",
    "sort/1": "p",
    "sort/2": "u",
    "sort_by/2": "l",
    "sort_by/3": "u",
    "split/2": "p",
    "split_while/2": "u",
    "sum/1": "p",
    "take/2": "p",
    "take_while/2": "u",
    "to_list/1": "p",
    "uniq/1": "p",
    "uniq_by/2": "u",
    "with_index/1": "p",
    "with_index/2": "u",
    "zip/1": "p",
    "zip/2": "p",
    "zip_with/2": "u",
    "zip_with/3": "u"
  },
  "Elixir.File": {
    "chmod/2": "s",
    "chown/2": "s",
    "close/1": "s",
    "cp/2": "s",
    "cp/3": "s",
    "cp_r/2": "s",
    "cp_r/3": "s",
    "dir?/1": "s",
    "exists?/1": "s",
    "ls/0": "s",
    "ls/1": "s",
    "mkdir/1": "s",
    "mkdir/2": "s",
    "mkdir_p/1": "s",
    "mkdir_p/2": "s",
    "open/1": "s",
    "open/2": "s",
    "open/3": "s",
    "read!/1": "s",
    "read!/2": "s",
    "read/1": "s",
    "read/2": "s",
    "regular?/1": "s",
    "rm/1": "s",
    "rm_rf/1": "s",
    "stat/1": "s",
    "stream!/1": "s",
    "stream!/2": "s",
    "stream!/3": "s",
    "touch/1": "s",
    "touch/2": "s",
    "write!/2": "s",
    "write!/3": "s",
    "write/2": "s",
    "write/3": "s"
  },
  "Elixir.GenServer": {
    "call/2": "s",
    "call/3": "s",
    "cast/2": "s",
    "start/2": "s",
    "start/3": "s",
    "start/4": "s",
    "start_link/2": "s",
    "start_link/3": "s",
    "start_link/4": "s",
    "stop/1": "s",
    "stop/2": "s",
    "stop/3": "s"
  },
  "Elixir.IO": {
    "binread/1": "s",
    "binread/2": "s",
    "binwrite/1": "s",
    "binwrite/2": "s",
    "getn/1": "s",
    "getn/2": "s",
    "gets/0": "s",
    "gets/1": "s",
    "gets/2": "s",
    "inspect/1": "s",
    "inspect/2": "s",
    "puts/1": "s",
    "puts/2": "s",
    "read/1": "s",
    "read/2": "s",
    "stream/1": "s",
    "stream/2": "s",
    "warn/1": "s",
    "warn/2": "s",
    "write/1": "s",
    "write/2": "s"
  },
  "Elixir.Kernel": {
    "!/1": "p",
    "!=/2": "p",
    "!==/2": "p",
    "%/2": "p",
    "&&/2": "p",
    "&/1": "p",
    "*/2": "p",
    "+/1": "p",
    "+/2": "p",
    "-/1": "p",
    "-/2": "p",
    "->/2": "p",
    "../2": "p",
    "./1": "p",
    "./2": "p",
    "//2": "p",
    "::/2": "p",
    "</2": "p",
    "<<>>/2": "p",
    "<<>>/3": "p",
    "<<>>/4": "p",
    "<<>>/5": "p",
    "<=/2": "p",
    "<>/2": "p",
    "=/2": "p",
    "==/2": "p",
    "===/2": "p",
    ">/2": "p",
    ">=/2": "p",
    "@/1": "p",
    "abs/1": "p",
    "after/1": "p",
    "and/2": "p",
    "apply/2": "u",
    "apply/3": "u",
    "binary_part/2": {
      "e": [
        "exn"
      ]
    },
    "binary_part/3": {
      "e": [
        "exn"
      ]
    },
    "bit_size/1": {
      "e": [
        "exn"
      ]
    },
    "byte_size/1": {
      "e": [
        "exn"
      ]
    },
    "case/2": "p",
    "catch/1": "p",
    "ceil/1": "p",
    "cond/1": "p",
    "div/2": {
      "e": [
        "exn"
      ]
    },
    "elem/2": {
      "e": [
        "ArgumentError"
      ]
    },
    "else/1": "p",
    "exit/1": {
      "e": [
        "exn"
      ]
    },
    "floor/1": "p",
    "fn/1": "p",
    "for/1": "p",
    "for/2": "p",
    "get_in/2": "p",
    "hd/1": {
      "e": [
        "exn"
      ]
    },
    "if/2": "p",
    "in/2": "p",
    "inspect/1": "p",
    "inspect/2": "p",
    "is_atom/1": "p",
    "is_binary/1": "p",
    "is_bitstring/1": "p",
    "is_boolean/1": "p",
    "is_float/1": "p",
    "is_function/1": "p",
    "is_function/2": "p",
    "is_integer/1": "p",
    "is_list/1": "p",
    "is_map/1": "p",
    "is_nil/1": "p",
    "is_number/1": "p",
    "is_pid/1": "p",
    "is_port/1": "p",
    "is_reference/1": "p",
    "is_tuple/1": "p",
    "length/1": "p",
    "map_size/1": {
      "e": [
        "exn"
      ]
    },
    "match?/2": "p",
    "max/2": "p",
    "min/2": "p",
    "node/0": "p",
    "not/1": "p",
    "or/2": "p",
    "put_elem/3": {
      "e": [
        "exn"
      ]
    },
    "put_in/2": "p",
    "quote/1": "p",
    "quote/2": "p",
    "raise/1": {
      "e": [
        "exn"
      ]
    },
    "raise/2": {
      "e": [
        "exn"
      ]
    },
    "receive/1": "s",
    "rem/2": {
      "e": [
        "ArithmeticError"
      ]
    },
    "reraise/2": {
      "e": [
        "exn"
      ]
    },
    "reraise/3": {
      "e": [
        "exn"
      ]
    },
    "rescue/1": "p",
    "round/1": "p",
    "self/0": "p",
    "send/2": "s",
    "sigil_C/2": "p",
    "sigil_R/2": "p",
    "sigil_S/2": "p",
    "sigil_W/2": "p",
    "sigil_c/2": "p",
    "sigil_r/2": "p",
    "sigil_s/2": "p",
    "sigil_w/2": "p",
    "spawn/1": "s",
    "spawn/2": "s",
    "spawn/3": "s",
    "spawn_link/1": "s",
    "spawn_link/2": "s",
    "spawn_link/3": "s",
    "spawn_monitor/1": "s",
    "spawn_monitor/2": "s",
    "spawn_monitor/3": "s",
    "throw/1": {
      "e": [
        "exn"
      ]
    },
    "tl/1": {
      "e": [
        "exn"
      ]
    },
    "to_charlist/1": "p",
    "to_string/1": "p",
    "trunc/1": "p",
    "try/1": "p",
    "tuple_size/1": {
      "e": [
        "exn"
      ]
    },
    "unless/2": "p",
    "unquote/1": "p",
    "unquote_splicing/1": "p",
    "update_in/2": "p",
    "with/1": "p",
    "|>/2": "p",
    "||/2": "p"
  },
  "Elixir.Logger": {
    "add_backend/2": "s",
    "configure/1": "s",
    "configure/2": "s",
    "debug/1": "s",
    "debug/2": "s",
    "debug/3": "s",
    "error/1": "s",
    "error/2": "s",
    "error/3": "s",
    "info/1": "s",
    "info/2": "s",
    "info/3": "s",
    "log/2": "s",
    "log/3": "s",
    "log/4": "s",
    "remove_backend/1": "s",
    "remove_backend/2": "s",
    "warn/1": "s",
    "warn/2": "s",
    "warn/3": "s"
  },
  "Elixir.Map": {
    "put/3": "p",
    "fetch/2": "p"
  },
  "Elixir.Mix": {
    "compilers/0": "u",
    "debug/1": "u",
    "debug?/0": "p",
    "env/0": "u",
    "env/1": "u",
    "install/1": "u",
    "install/2": "u",
    "install?/0": "p",
    "installed?/0": "p",
    "path_for/1": "u",
    "raise/1": "u",
    "raise/2": "u",
    "shell/0": "u",
    "shell/1": "u",
    "start/0": "u",
    "start/2": "u",
    "stop/1": "u",
    "target/0": "u",
    "target/1": "u"
  },
  "Elixir.Port": {
    "call/2": "s",
    "call/3": "s",
    "close/1": "s",
    "command/2": "s",
    "command/3": "s",
    "connect/2": "s",
    "controlling_process/2": "s",
    "info/1": "s",
    "info/2": "s",
    "open/2": "s",
    "open/3": "s"
  },
  "Elixir.Process": {
    "cancel_timer/1": "s",
    "demonitor/1": "s",
    "demonitor/2": "s",
    "exit/1": "s",
    "exit/2": "s",
    "flag/2": "s",
    "flag/3": "s",
    "link/1": "s",
    "monitor/2": "s",
    "register/2": "s",
    "send/2": "s",
    "send/3": "s",
    "send_after/3": "s",
    "send_after/4": "s",
    "spawn/1": "s",
    "spawn/2": "s",
    "spawn/3": "s",
    "spawn_link/1": "s",
    "spawn_link/2": "s",
    "spawn_link/3": "s",
    "spawn_monitor/1": "s",
    "spawn_monitor/2": "s",
    "spawn_monitor/3": "s",
    "unlink/1": "s",
    "unregister/1": "s",
    "whereis/1": "s",
    "get/0": "d",
    "get/1": "d",
    "get_keys/0": "d",
    "put/2": "s",
    "delete/1": "s"
  },
  "Elixir.String": {
    "at/2": "p",
    "capitalize/1": "p",
    "capitalize/2": "p",
    "contains?/2": "p",
    "downcase/1": "p",
    "downcase/2": "p",
    "duplicate/2": "p",
    "ends_with?/2": "p",
    "first/1": "p",
    "graphemes/1": "p",
    "last/1": "p",
    "length/1": "p",
    "match?/2": "p",
    "pad_leading/2": "p",
    "pad_leading/3": "p",
    "pad_trailing/2": "p",
    "pad_trailing/3": "p",
    "replace/3": "p",
    "replace/4": "p",
    "reverse/1": "p",
    "slice/2": "p",
    "slice/3": "p",
    "split/1": "p",
    "split/2": "p",
    "split/3": "p",
    "starts_with?/2": "p",
    "to_atom/1": "p",
    "to_charlist/1": "p",
    "to_float/1": "p",
    "to_integer/1": "p",
    "to_integer/2": "p",
    "to_string/1": "p",
    "trim/1": "p",
    "trim/2": "p",
    "trim_leading/1": "p",
    "trim_leading/2": "p",
    "trim_trailing/1": "p",
    "trim_trailing/2": "p",
    "upcase/0": "p",
    "upcase/1": "p",
    "upcase/2": "p",
    "valid?/1": "p"
  },
  "Elixir.Supervisor": {
    "count_children/1": "s",
    "delete_child/2": "s",
    "restart_child/2": "s",
    "restart_child/3": "s",
    "start_child/2": "s",
    "start_child/3": "s",
    "start_link/2": "s",
    "start_link/3": "s",
    "terminate_child/2": "s",
    "terminate_child/3": "s",
    "which_children/1": "s"
  },
  "Elixir.System": {
    "cmd/1": "s",
    "cmd/2": "s",
    "delete_env/1": "s",
    "get_env/1": "d",
    "get_env/2": "d",
    "halt/0": "s",
    "halt/1": "s",
    "monotonic_time/0": "d",
    "monotonic_time/1": "d",
    "os_time/0": "d",
    "os_time/1": "d",
    "put_env/2": "s",
    "put_env/3": "s",
    "stop/0": "s",
    "stop/1": "s",
    "system_time/0": "d",
    "system_time/1": "d",
    "unique_integer/0": "d",
    "unique_integer/1": "d"
  },
  "Elixir.Task": {
    "async/1": "s",
    "async/2": "s",
    "async/3": "s",
    "async_stream/2": "s",
    "async_stream/3": "s",
    "async_stream/4": "s",
    "await/1": "s",
    "await/2": "s",
    "shutdown/1": "s",
    "shutdown/2": "s",
    "start/1": "s",
    "start/2": "s",
    "start/3": "s",
    "start_link/1": "s",
    "start_link/2": "s",
    "start_link/3": "s",
    "yield/1": "s",
    "yield/2": "s"
  },
  "dets": {
    "close/1": "s",
    "delete/2": "s",
    "info/1": "s",
    "info/2": "s",
    "insert/2": "s",
    "lookup/2": "s",
    "match/2": "s",
    "match/3": "s",
    "open_file/1": "s",
    "open_file/2": "s",
    "select/2": "s",
    "select/3": "s",
    "sync/1": "s"
  },
  "erlang": {
    "cancel_timer/1": "s",
    "demonitor/1": "s",
    "demonitor/2": "s",
    "link/1": "s",
    "localtime/0": "d",
    "monitor/2": "s",
    "monitor/3": "s",
    "monotonic_time/0": "d",
    "monotonic_time/1": "d",
    "now/0": "d",
    "open_port/2": "s",
    "port_close/1": "s",
    "port_command/2": "s",
    "port_command/3": "s",
    "port_connect/2": "s",
    "process_flag/2": "s",
    "process_flag/3": "s",
    "register/2": "s",
    "send/2": "s",
    "send/3": "s",
    "send_after/3": "s",
    "send_after/4": "s",
    "spawn/1": "s",
    "spawn/2": "s",
    "spawn/3": "s",
    "spawn_link/1": "s",
    "spawn_link/2": "s",
    "spawn_link/3": "s",
    "spawn_monitor/1": "s",
    "spawn_monitor/2": "s",
    "spawn_monitor/3": "s",
    "spawn_opt/2": "s",
    "spawn_opt/3": "s",
    "spawn_opt/4": "s",
    "system_time/0": "d",
    "system_time/1": "d",
    "system_info/1": "d",
    "time_offset/0": "s",
    "time_offset/1": "s",
    "timestamp/0": "d",
    "universaltime/0": "d",
    "unlink/1": "s",
    "unregister/1": "s",
    "whereis/1": "d"
  },
  "ets": {
    "delete/1": "s",
    "delete/2": "s",
    "delete_all_objects/1": "s",
    "info/1": "d",
    "info/2": "d",
    "insert/2": "s",
    "lookup/2": "d",
    "match/2": "d",
    "match/3": "d",
    "new/1": "s",
    "new/2": "s",
    "rename/2": "s",
    "select/2": "d",
    "select/3": "d",
    "tab2list/1": "s"
  },
  "gen_tcp": {
    "accept/1": "s",
    "accept/2": "s",
    "close/1": "s",
    "connect/3": "s",
    "connect/4": "s",
    "controlling_process/2": "s",
    "listen/1": "s",
    "listen/2": "s",
    "recv/2": "s",
    "recv/3": "s",
    "send/2": "s"
  },
  "gen_udp": {
    "close/1": "s",
    "controlling_process/2": "s",
    "open/1": "s",
    "open/2": "s",
    "recv/2": "s",
    "recv/3": "s",
    "send/4": "s"
  },
  "inet": {
    "getaddr/2": "s",
    "getaddrs/2": "s",
    "gethostname/0": "s",
    "getif/0": "s",
    "getif/1": "s",
    "getopts/1": "s",
    "getopts/2": "s",
    "getstat/1": "s",
    "getstat/2": "s",
    "setopts/2": "s"
  },
  "os": {
    "cmd/1": "s",
    "cmd/2": "s",
    "getenv/1": "d",
    "getenv/2": "d",
    "putenv/2": "s",
    "system_time/0": "d",
    "system_time/1": "d",
    "unsetenv/1": "s"
  },
  "rand": {
    "bytes/1": "s",
    "bytes_s/2": "s",
    "seed/0": "s",
    "seed/1": "s",
    "seed_s/1": "s",
    "uniform/0": "s",
    "uniform/1": "s",
    "uniform_s/1": "s"
  },
  "random": {
    "bytes/1": "s",
    "bytes_s/2": "s",
    "seed/0": "s",
    "seed/1": "s",
    "seed_s/1": "s",
    "uniform/0": "s",
    "uniform/1": "s",
    "uniform_s/1": "s"
  },
  "ssl": {
    "accept/1": "s",
    "accept/2": "s",
    "close/1": "s",
    "connect/3": "s",
    "connect/4": "s",
    "controlling_process/2": "s",
    "listen/2": "s",
    "listen/3": "s",
    "recv/2": "s",
    "recv/3": "s",
    "send/2": "s"
  },
  "_metadata": {
    "generated_at": "2025-10-18T18:55:29.fZ",
    "litmus_version": "0.1.0",
    "total_functions": 615
  },
  "Elixir.List": {
    "first/1": "p",
    "first/2": "p"
  },
  "Elixir.Integer": {
    "to_string/1": "p",
    "to_string/2": "p"
  },
  "Kernel": {
    "elem/2": {
      "e": [
        "ArgumentError"
      ]
    },
    "rem/2": {
      "e": [
        "ArithmeticError"
      ]
    }
  }
}
